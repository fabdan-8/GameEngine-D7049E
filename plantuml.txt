--- Copy the code below into https://www.planttext.com/ to generate a diagram
@startuml

title GameEngine - Class Diagram


struct GameEngine << singleton >> {
  +std::map<int, *Ogre::SceneManager> sceneManagerMap
  ..
  +std::map<int, *Script> scriptMap
  ..
  +std::map<int, *Entity> entityMap
  +std::map<int, *Renderable> renderableMap
  +std::map<int, *Physics> physicsMap 
  +std::map<int, *ScriptData> scriptDataMap
  +std::map<int, *Sound> soundMap
  +std::map<int, *Camera> cameraMap
  ..
  +int main(int argv, char **argc)
  +*Script getScriptFromName(std::string name)
  +*Renderable getRenderableFromName(std::string name)
  +*Sound getSoundFromName(std::string name)
}
struct EntityManager << singleton >> {
    -int entityId // This gets incremented after each object added
    // that does not share id
    +Entity createEntity()
    +void deleteEntity(int id) // This also deletes associated components

}


struct GameSceneManager << singleton >> {
  +int currentScene
  +void changeScene(int scene)
  +int loadScene(std::string name)
}

struct CameraManager << singleton >> {
  +int currentCamera
  +void changeCamera(int id)
}

package EntitySystem {
struct Entity {
    +int entityId
    +Entity::Entity(int id)
}
note "Every component is bound to an entity.
This allows us to have renderable entities
or just a standalone non rendered entity
for sound/music." as N10
Entity .. N10

struct Renderable {
  +const int entityId
  // If you want the name use ent->getName()
  +Ogre::Entity *ent
  +Ogre::SceneNode *node
  +Renderable::Renderable(std::string filename, float scale = 1.0f,
  Ogre::Vector3 xyz = {0.0f, 0.0f, 0.0f})
  -Renderable::Renderable(Ogre::Vector3 xyz) // Constructor for light
  +void createLight(Ogre::Vector3 xyz = {0.0f, 0.0f, 0.0f})
  +void Load(...) 
}


struct Physics {
  +const int entityId
  +bool isImoveable
  +float weight // How fast it moves
  +Physics::Physics(int id, bool isMoveable = true, int weight = 1.0f)
  +void Update()
}



struct ScriptData {
  +const int entityId
  +const int scriptId
  +void *data // All data associated with a script
  // bound to a single object
  +ScriptData::ScriptData(int entityId, int scriptId)
  +void Update() // Run script
}

struct Sound {
  +const int entityId
  +std::string name
  +<type> data
  +Sound::Sound(int entityId, std::string filename)
  +void playSound()
}

struct Camera {
  +const int entityId
  +Camera::Camera(int entityId)
  ...
}
}

struct Script {
  +const int scriptId // This is not entityId
  +std::string name
  +void *code
  +void Update()
  +Script::Script(std::string filename)
}

GameEngine -- Physics
GameEngine -- Renderable
GameEngine -- Sound
GameEngine -- Script
Script -- ScriptData
GameEngine -- ScriptData
GameEngine -- Camera
EntityManager -- Entity
Entity -- Physics
Entity -- Renderable
Entity -- Sound
Entity -- Script
Entity -- ScriptData
Entity -- Camera
GameEngine -- Entity

CameraManager -- Camera

@enduml
